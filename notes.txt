mkdir WebShopping
cd WebShopping
npm init -y
npx express-generator --view=hbsy
npm install nodemon
nodemon bin/www

Designing index.hbs

Chrome => Bootstrap starter template => https://getbootstrap.com/docs/4.0/getting-started/introduction/ => Paste in index.hbs

Chrome => Bootstrap navbar => Paste inside header which is inside body in index.hbs

Removing styles(public/stylesheets/style.css)

Listing dummy products => Bootstrap cards => cards inside div(section(body)) => Four cards in a row(class="col-md-3")

Passing array of products => index.js => Using array of products in index.hbs({{this.name}})

Layout setting => views/layout/layout.hbs

Different settings users and admin => views/partials/adminheader or userheader

Default set up
Engine set up => app.js => app.engine('hbs',hbs.engine({extname: 'hbs',defaultLayout:'layout',layoutsDir:__dirname+'/views/layout/',partialsDir:__dirname+'/views/partials/'}));
In app.js => npm install express-handlebars

setting up views/layout/layout.hbs

headers into partials => {{>adminheader}} in layout.hbs
headers into partials => {{>userheader}} in layout.hbs
To differentiate between user and admin => index.js => res.render('index', {products,admin:true});

index.js for users and admin.js for admin

adminheader and userheader edited
Set admin status for admin.js and users.js

Set user and admin file in views
Creating vieewproducts.hbs in views/admin and add bootstrap table

Add product form
Enoding type for file uploading
<form action="/admin/addproduct" method="post" enctype="multipart/form-data">

For file upload from add product form
npm install express-fileupload
app.js => var fileUpload = require('express-fileupload');
Adding middleware for express-fileupload
app.use(fileUpload());

Created config folder for database configuration

helpers file created

ops array => producthelpers.js

app.js
Server started and database connection established
get is used to get state.db

req.body contains form from user

getAllProducts from data base => producthelpers.js
Promise
config/collections.js

Chrome => Robo mongo

Dropdowns bootstrap => login => login user.js => router.get()

users.js => Use signup data to database and the password will be in encrypted format(oneway functions)
npm install bcrypt

Sessions and cookies(cookie ID)
Express session library
npm i express-session
app.js
Session stored in server and cookie stored in browser

If we press back key after login,then will comeback to login page
Then check login status

Cart

admin/editproduct.hbs

"id" used in "img" tag and "onchange" in "input" tag for checking live image update

session created for signup => user.js

Add to cart

Bootstrap notification icon with count(Badges)

Razorpay integration
Razorpay npm module => npm i razorpay

Admin login